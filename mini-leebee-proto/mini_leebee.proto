syntax = "proto3";
package mini_leebee;

// A plugin.
message Plugin {
    // A unique identifier of the plugin.
    string id = 1;
    // The human readable name of the plugin.
    string name = 2;
}

// A track.
message Track {
    // The unique identifier for the track.
    int32 id = 1;
    // The name of the track.
    string name = 2;
    /// The plugins on the track.
    repeated TrackPlugin plugins = 3;
}

// A plugin within a track.
message TrackPlugin {
    // The id of the plugin.
    string plugin_id = 1;
}

service MiniLeebee {
    // Get the plugins that the server knows about.
    rpc GetPlugins(GetPluginsRequest) returns (GetPluginsResponse);

    // Set metrenome related parameters.
    rpc SetMetrenome(SetMetrenomeRequest) returns (SetMetrenomeResponse);

    // Add a plugin to a track.
    rpc AddPluginToTrack(AddPluginToTrackRequest) returns (AddPluginToTrackResponse);

    // Remove a plugin from a track.
    rpc RemovePluginFromTrack(RemovePluginFromTrackRequest) returns (RemovePluginFromTrackResponse);

    // Get the tracks.
    rpc GetTracks(GetTracksRequest) returns (GetTracksResponse);

    // Create a new track.
    rpc CreateTrack(CreateTrackRequest) returns (CreateTrackResponse);

    // Delete tracks.
    rpc DeleteTracks(DeleteTracksRequest) returns (DeleteTracksResponse);
}

// The request for the GetPlugins rpc.
message GetPluginsRequest {}

// The response for the GetPlugins rpc.
message GetPluginsResponse {
    // The plugins that were found.
    repeated Plugin plugins = 1;
}

// The request for the SetMetrenome rpc.
message SetMetrenomeRequest {
    float beats_per_minute = 1;
    float metrenome_volume = 2;
}

// The response for the SetMetrenome rpc.
message SetMetrenomeResponse {}

// The request for the AddPluginToTrack rpc.
message AddPluginToTrackRequest {
    // The id of the track to add the plugin to.
    int32 track_id = 1;
    // The id of the plugin to add the plugin.
    string plugin_id = 2;
}

// The response for the AddPluginToTrack rpc.
message AddPluginToTrackResponse {}

// The request for the RemovePluginFromTrackRequest.
message RemovePluginFromTrackRequest {
    // The id of the track to remove the plugin from.
    int32 track_id = 1;
    // The index of the plugin to remove.
    //
    // TODO: Consider using an id to prevent race conditions. If two clients try
    // to delete a plugin at the same time, unexpected things may happen.
    int32 plugin_index = 2;
}

// The response for the RemovePluginFromTrackResponse.
message RemovePluginFromTrackResponse {}

// The request for the GetTracks rpc.
message GetTracksRequest {}

// The response for the GetTracks rpc.
message GetTracksResponse {
    // The tracks.
    repeated Track tracks = 1;
}

// The request for the CreateTrack rpc.
message CreateTrackRequest {
    // The name of the track to create.
    string name = 1;
}

// The response for the CreateTrack rpc.
message CreateTrackResponse{
    // The id of the created track.
    int32 track_id = 1;
}

// The request for the DeleteTracks rpc.
message DeleteTracksRequest {
    // The tracks to delete. If some of the tracks do not exist, then those will
    // be silently ignored.
    repeated int32 track_ids = 1;
}

// The response for the DeleteTracks rpc.
message DeleteTracksResponse {
    repeated int32 deleted_track_ids = 1;
}